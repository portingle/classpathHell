// .\gradlew clean build publishToSonatype closeAndReleaseSonatypeStagingRepository
// to see staged builds login and go to https://oss.sonatype.org/#stagingRepositories


plugins {
    id("io.github.gradle-nexus.publish-plugin").version("1.0.0")
    id 'java-library'
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group 'com.portingle'
archivesBaseName = "classpath-hell"
version '1.7.0'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation gradleApi()

    testImplementation(gradleTestKit())

    testImplementation group: 'junit', name: 'junit', version: '4.11'
}


java {
    withJavadocJar()
    withSourcesJar()
}


artifacts {
    archives jar, javadocJar, sourcesJar
}

test {
    logging.captureStandardOutput LogLevel.WARN


    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "full"
        showExceptions = true
        showCauses = true
        showStandardStreams = true

        // set options for log level DEBUG
//        debug {
//            events "skipped", "failed"
//            exceptionFormat "full"
//        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }
}
// see http://jdpgrailsdev.github.io/blog/2016/03/29/gradle_test_kit.html
task createPluginClasspath {
    //def outputDir = file("${buildDir}/resources/test")
    def buildRes = file("${buildDir}/resources/test/plugin-classpath.txt")
    def outRes = file("${buildDir.getParent()}/out/test/resources/plugin-classpath.txt")
    // for intellij which uses ./out rather than ./build

    inputs.files sourceSets.test.runtimeClasspath
    //outputs.dir outputDir
    outputs.files(buildRes, outRes)

    doLast {
        buildRes.getParentFile().mkdirs()
        outRes.getParentFile().mkdirs()
        file(buildRes).text = sourceSets.test.runtimeClasspath.join('\n',)
        file(outRes).text = sourceSets.test.runtimeClasspath.join('\n',)
    }
}

test.dependsOn(['createPluginClasspath'])

// consider using the Gradle Nexus Staging Maven as this avoids need to use the NExus gui to close and release the stage artifact.
// if the sonatypeUsername is provided by the gradle properties then a release is enabled

if (project.properties.containsKey("sonatypeUsername")) {

    apply plugin: 'signing'

    signing {
        sign configurations.archives
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                pom {
                    name = 'classpath-hell'
                    packaging = 'jar'

                    // optionally artifactId can be defined here
                    description = 'ClasspathHell Gradle Plugin detects duplicate resources on the classpath'
                    url = 'https://github.com/portingle/classpathHell'

                    scm {
                        connection = 'scm:git@github.com:portingle/classpathHell.git'
                        developerConnection = 'scm:git@github.com:portingle/classpathHell.git'
                        url = 'scm:git@github.com:portingle/classpathHell.git'
                    }

                    licenses {
                        license {
                            name = 'The MIT Licence (MIT)'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }

                    developers {
                        developer {
                            id = 'Johnlon'
                            name = 'John Lonergan'
                        }
                    }
                }

                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

            }
        }
    }

    nexusPublishing {
        repositories {
            // relies on sonatypeUsername/sonatypePassword being defined in "{gradle_home}/gradle.properties"
            sonatype()
        }
    }

} else {
    println("uploadArchives for release is disabled - 'sonatypeUsername' is undefined")
}


/* Avoid this issue when publishing by NOT sending a geadle "module" file
Missing Signature: '/com/portingle/slf4jtesting/1.2.0/slf4jtesting-1.2.0.module.asc' does not exist for 'slf4jtesting-1.2.0.module'
Would be better to figure out how to sign it.
*/
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8





apply plugin: 'groovy'
apply plugin: 'maven'

group 'com.portingle'
archivesBaseName = "classpath-hell"
version '1.4'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile gradleApi()
    testCompile gradleTestKit()
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}
test {
    logging.captureStandardOutput LogLevel.WARN


    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "full"
        showExceptions = true
        showCauses = true
        showStandardStreams = true

        // set options for log level DEBUG
//        debug {
//            events "skipped", "failed"
//            exceptionFormat "full"
//        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }
}
// see http://jdpgrailsdev.github.io/blog/2016/03/29/gradle_test_kit.html
task createPluginClasspath {
    //def outputDir = file("${buildDir}/resources/test")
    def buildRes = file("${buildDir}/resources/test/plugin-classpath.txt")
    def outRes = file("${buildDir.getParent()}/out/test/resources/plugin-classpath.txt") // for intellij which uses ./out rather than ./build

    inputs.files sourceSets.test.runtimeClasspath
    //outputs.dir outputDir
    outputs.files(buildRes, outRes)

    doLast {
        buildRes.getParentFile().mkdirs()
        outRes.getParentFile().mkdirs()
        file(buildRes).text = sourceSets.test.runtimeClasspath.join('\n',)
        file(outRes).text = sourceSets.test.runtimeClasspath.join('\n',)
    }
}

test.dependsOn(['createPluginClasspath'])

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

// TODO ....
// consider using the Gradle Nexus Staging Maven as this avoids need to use the NExus gui to close and release the stage artifact.
// if the sonatypeUsername is provided by the gradle properties then a release is enabled

if (project.properties.containsKey("sonatypeUsername")) {

    apply plugin: 'signing'

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name 'classpath-hell'
                    packaging 'jar'

                    // optionally artifactId can be defined here
                    description 'ClasspathHell Gradle Plugin detects duplicate resources on the classpath'
                    url 'https://github.com/portingle/classpathHell'

                    scm {
                        connection 'scm:git@github.com:portingle/classpathHell.git'
                        developerConnection 'scm:git@github.com:portingle/classpathHell.git'
                        url 'scm:git@github.com:portingle/classpathHell.git'
                    }

                    licenses {
                        license {
                            name 'The MIT Licence (MIT)'
                            url 'https://opensource.org/licenses/MIT'
                        }
                    }

                    developers {
                        developer {
                            id 'Johnlon'
                            name 'John Lonergan'
                        }
                    }
                }
            }
        }
    }
} else {
    println("release is disabled - change the 'release' flag in build.gradle if required")
}
// RELEASNG ...
// SETUP:   place gradle.properties dir in c:\users\johnl\gradlerelease\
// RELEASE: .\gradlew -g c:\users\johnl\gradlerelease clean build publishToSonatype closeAndReleaseSonatypeStagingRepository
// VERIFY:  https://repo.maven.apache.org/maven2/com/portingle/classpath-hell/
// ALSO to see staged builds login and go to https://oss.sonatype.org/#stagingRepositories


// TESTING LOCALLY - to install to the local repo for testing
// .\gradlew publishToMavenLocal



plugins {
    id 'com.gradle.plugin-publish' version '1.2.0'

//    id("io.github.gradle-nexus.publish-plugin").version("1.0.0")
//    id 'java-gradle-plugin'
    id 'groovy'
    id 'signing'

}

//apply plugin: 'maven-publish'
//apply plugin: 'signing'

group 'com.portingle'
archivesBaseName = "classpath-hell"
version '1.8'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation gradleApi()

    testImplementation(gradleTestKit())

    testImplementation group: 'junit', name: 'junit', version: '4.11'
}


java {
    withJavadocJar()
    withSourcesJar()
}


artifacts {
    archives jar, javadocJar, sourcesJar
}

test {
    logging.captureStandardOutput LogLevel.WARN


    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "full"
        showExceptions = true
        showCauses = true
        showStandardStreams = true

        // set options for log level DEBUG
//        debug {
//            events "skipped", "failed"
//            exceptionFormat "full"
//        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }
}
// see http://jdpgrailsdev.github.io/blog/2016/03/29/gradle_test_kit.html
task createPluginClasspath {
    //def outputDir = file("${buildDir}/resources/test")
    def buildRes = file("${buildDir}/resources/test/plugin-classpath.txt")
    def outRes = file("${buildDir.getParent()}/out/test/resources/plugin-classpath.txt")
    // for intellij which uses ./out rather than ./build

    inputs.files sourceSets.test.runtimeClasspath
    //outputs.dir outputDir
    outputs.files(buildRes, outRes)

    doLast {
        buildRes.getParentFile().mkdirs()
        outRes.getParentFile().mkdirs()
        file(buildRes).text = sourceSets.test.runtimeClasspath.join('\n',)
        file(outRes).text = sourceSets.test.runtimeClasspath.join('\n',)
    }
}

task runDemoPass(type: Exec) {
    dependsOn(["publishToMavenLocal"])

    workingDir 'demo/shouldPass'
    commandLine 'cmd', '/c', '..\\..\\gradlew', 'clean', 'build', '-i'
    doFirst {
        println("EXEC PASSING DEMO")
    }
    doLast {
        println("\nEXEC END")
    }
}
task runDemoFail(type: Exec) {
    dependsOn(["publishToMavenLocal"])

    workingDir 'demo/shouldFail'
    commandLine 'cmd', '/c', '..\\..\\gradlew', 'clean', 'build', '-i'

    ignoreExitValue true

    doFirst {
        println("EXEC FAILING DEMO")
    }
    doLast {
        if(executionResult.get().exitValue == 0) {
            System.err.println("\nEXEC END - DID NOT GET THE EXPECTED FAILURE!!!")
            throw new GradleException("demo at '" + workingDir + "' should have failed but did not fail !!!!!!!")
        }
        println("\nEXEC END - WITH EXPECTED FAILURE OF SCAN")
    }
}

test.dependsOn(['createPluginClasspath'])
test.finalizedBy(['runDemoPass','runDemoFail'])

// consider using the Gradle Nexus Staging Maven as this avoids need to use the NExus gui to close and release the stage artifact.
// if the sonatypeUsername is provided by the gradle properties then a release is enabled

if (project.properties.containsKey("sonatypeUsername")) {

//    apply plugin: 'signing'

//    signing {
//        sign configurations.archives
//    }
} else {
    println("signing for release is disabled - 'sonatypeUsername' is undefined")
}


publishing {
    publications {
        // Ues pluginMaven - https://github.com/gradle/gradle/issues/10384
        // To address...
        // Multiple publications with coordinates 'com.portingle:classpath-hell:1.8' are published to repository 'mavenLocal'. The publications will overwrite each other!
        classpathPlugin(MavenPublication) {
            from components.java

            pom {
                name = 'classpath-hell'
                packaging = 'jar'

                // optionally artifactId can be defined here
                description = 'ClasspathHell Gradle Plugin detects duplicate resources on the classpath'
                url = 'https://github.com/portingle/classpathHell'

                scm {
                    connection = 'scm:git@github.com:portingle/classpathHell.git'
                    developerConnection = 'scm:git@github.com:portingle/classpathHell.git'
                    url = 'scm:git@github.com:portingle/classpathHell.git'
                }

                licenses {
                    license {
                        name = 'The MIT Licence (MIT)'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'Johnlon'
                        name = 'John Lonergan'
                    }
                }
            }

            if (project.properties.containsKey("sonatypeUsername")) {

                // create the signed artifacts
//                project.tasks.signArchives.signatureFiles.each {
//                    artifact(it) {
//                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
//                        if (matcher.find()) {
//                            classifier = matcher.group(1)
//                        } else {
//                            classifier = null
//                        }
//                        extension = 'jar.asc'
//                    }
//                }

//                pom.withXml {
//                    def pomFile = file("${project.buildDir}/generated-pom.xml")
//                    writeTo(pomFile)
//                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
//                    artifact(pomAscFile) {
//                        classifier = null
//                        extension = 'pom.asc'
//                    }
//                }
            }
        }
    }
}

//nexusPublishing {
//    repositories {
//        // relies on sonatypeUsername/sonatypePassword being defined in "{gradle_home}/gradle.properties"
//        sonatype()
//    }
//}


/* Avoid this issue when publishing by NOT sending a geadle "module" file
Missing Signature: '/com/portingle/slf4jtesting/1.2.0/slf4jtesting-1.2.0.module.asc' does not exist for 'slf4jtesting-1.2.0.module'
Would be better to figure out how to sign it.
*/
//tasks.withType(GenerateModuleMetadata) {
//    enabled = false
//}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


gradlePlugin {
    website = 'https://github.com/portingle/classpathHell'
    vcsUrl = 'https://github.com/portingle/classpathHell.git'

    // Define the plugin
    plugins {
        classpathhellPlugin {
            id = 'com.portingle.classpath-hell'
            implementationClass = 'classpathHell.ClasspathHellPlugin'
            displayName = 'ClasspathHell Gradle Plugin detects duplicate resources on the classpath'
            description = 'ClasspathHell Gradle Plugin detects duplicate resources on the classpath'
            tags.addAll(['testing', 'classpath'])

        }
    }
}




